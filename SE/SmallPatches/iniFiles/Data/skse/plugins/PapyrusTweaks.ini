[Fixes]

;Fixes ToggleScripts command not persisting when saving/stack dumping
;Scripts will now stay turned off when toggled off, and on when toggled on.
bFixToggleScriptsCommand = true

;Fix unintentionally allocating script pages when getting largest available page, but out of memory.
bFixScriptPageAllocation = true

;Fix crash when passing in NONE object to script function Actor.IsHostileToActor().
bFixIsHostileToActorCrash = true

;Fix scripts that don't load right away breaking completely if they reference an invalid object type (Ex: SuperSecretScript has a function that takes InvalidScript as a parameter).
bFixDelayedScriptBreakage = true


[VM Tweaks (Tweaks that directly alter the script engine)]

;Maximum papyrus operations per frame. Higher number means better script performance on average
;Has a very minor impact on framerate, and varies from script to script. (Default: 500, Vanilla value: 100). Recommended Range: 100-2000. Set to 0 to disable
iMaxOpsPerFrame = 500

;Modify how long Papyrus can be "overstressed" before dumping stacks, in milliseconds (Default value: 15000, Vanilla value: 5000).
;Set to 0 to disable the stack dump check, or -1 to disable this setting.
;See https://www.nexusmods.com/skyrimspecialedition/articles/4625 for information on what a stack dump is
iStackDumpTimeoutMS = 15000

;Enables loading of doc strings from scripts into the engine. Requires `bLoadDebugInformation` to be true in this INI
bEnableDocStrings = true

;Enables Skyrim to load debug information of scripts. This completely overrides bLoadDebugInformation in Skyrim.ini and is provided here for easier configuration
bEnableDebugInformation = true


[Logging Tweaks (Tweaks that affect script logging)]

;Disables `File " % s " does not exist or is not currently loaded.` logs from being printed when calling Game.GetFormFromFile().
;This only disables the logging of the error, the error itself will still occur
bDisableGetFormFromFileErrorLogs = false

;Improves Base Type Mismatch error to show inheritance hierarchy of scripts; Also clarifies if the script was a genuine mismatch, or if the script doesn't exist
bImproveBaseTypeMismatchLogs = true

;Improves several error logs relating to incompatible arguments to better clarify what is incompatible
bImproveValidateArgsLogs = true

;Disable "Property %s on script %s attached to %s cannot be initialized because the script no longer contains that property" log messages.
;This only disables the logging of the warning, the warning itself will still occur
bDisableNoPropertyOnScriptErrorLogs = false

;Disable "Cannot open store for class "%s", missing file?" errors being logged.
;This only disables the logging of the error, the error itself will still occur
bDisableMissingScriptError = false

;Adds a summary of events when dumping stacks to log
bSummarizeStackDumps = true


[Experimental]

;(Formerly bRunScriptsOnMainThreadOnly)
;Speeds up native calls by desyncing them from framerate and instead syncing script calls to a spinlock, greatly improving script performance while still preventing concurrent execution of native calls
bSpeedUpNativeCalls = false

;(Formerly sMainThreadClassesToExclude, requires bSpeedUpNativeCalls=true)
;List of script classes to exclude from being sped up by bSpeedUpNativeCalls.
;It is strongly recommended to leave at defaults unless you absolutely know what you're doing
sScriptClassesToExclude = UI, ConsoleUtil, PO3_SKSEFunctions, MfgConsole, MFGConsoleFunc, Input, Debug, Utility, PapyrusTweaks

;(Formerly sMainThreadMethodsToExclude, requires bSpeedUpNativeCalls=true)
;List of script method prefixes to exclude from being sped up (ex: "Equip" excludes "EquipItem" and "EquipItemByID", but does NOT exclude "UnequipItem".
;It is strongly recommended to leave at defaults unless you absolutely know what you're doing
;as a lot of modifying functions like `EquipItem` do not work properly if executed more than once in a single frame.
; Defaults exclude everything except for read-only functions (ex: GetFormFromFile, HasKeyword, IsLoaded, etc.)
sScriptMethodPrefixesToExclude = Activate, Add, Advance, Allow, Attach, Apply, Block, Cast, Change, Clear, Close, Complete, Create, Damage, Delete, Disable, Disallow, Dismount, Dispel, DoCombatSpellApply, Draw, Drop, Enable, End, Equip, Evaluate, Fade, Fail, Fire, Force, GetAnimation, GetQuest, Hide, Hold, Ignore, Increment, Keep, Kill, Knock, Learn, Load, Lock, Mod, Move, Mute, Open, Place, Play, Pop, Precache, Process, Push, Queue, Quit, Regenerate, Register, Release, RemoteCast, Remove, Request, Reset, Restore, Resurrect, Revert, Save, Say, Send, Serve, Set, Shake, Sheath, Show, Start, Stop, Teach, TempClone, Tether, Toggle, Translate, Trap, Trigger, Try, Unequip, Unlock, UnMute, UnPause, Update, Unregister

;(VR-ONLY) Pauses all non-playroom scripts while in the VR playroom, so mod scripts only initialize once you actually enter a save/new game.
;This is only experimental as it intentionally alters script behavior
bDisableScriptsInPlayroomVR = false

;Stops the game from resetting when loading a corrupted save
;This will NOT fix a broken save, just allows you to load the save no matter what information is lost. ONLY USE AS A LAST RESORT TO RECOVER A SAVE YOU HAVE BEEN WARNED!!
bBypassCorruptSaveMessage = false

;Allows the Script Engine to use as much memory as needed, with no cap. This makes `iMaxAllocatedMemoryBytes` in Skyrim.ini useless/infinite
;Note: Skyrim already ignores memory limit when stressed, this setting just keeps it ignored.
bIgnoreMemoryLimit = false
